import math
import string


def multiplicative_inverse(a, m):
    a=a%m; 
    for x in range(1,m) : 
        if((a*x)%m==1) : 
            return x 
    return 1
        
def generate_keypair(p, q):
    n=p*q
    print("Value of n: ",n)

    phi = (p-1)*(q-1)
    print("Value of phi(n): ", phi)
    e = 2
    while (e < phi):
        if(math.gcd(e, phi) == 1):
            break
        else:
            e = e+1
    print("value of e ",e)
    g=math.gcd(e,phi)
    while(g!=1):
        print("The number you entered is not co-prime")
        e=int(input())
        g=math.gcd(e,phi)  
    print("Value of exponent(e) entered is: ", e)
    d = multiplicative_inverse(e, phi)
    return (e,n),(d,n)


def encrypt(public_key, to_encrypt):
    key, n = public_key

    cipher=pow(to_encrypt,key)%n
    return cipher


def decrypt(private_key, to_decrypt):
    key, n = private_key

    decrypted=pow(to_decrypt,key)%n
    return decrypted

p=int(input("Enter prime p: "))
q=int(input("Enter prime q (!=p): "))

while(p==q):
    p=int(input("Enter prime p: "))
    q=int(input("Enter prime q (!=p): "))
    
print("Prime number p: ",p)
print("Prime number q: ",q)

print("Generating Public/Private key-pairs!")
public, private = generate_keypair(p, q)
print("Your public key is (e,n) ", public)
print("Your private key is (d,n) ", private)

message = int(input("Enter the message: "))

print("Encrypted message (Cipher Text): ",encrypt(public,message))

message_c = int(input("Enter cipher message: "))
print("Decrypted message (Plain Text): ", decrypt(private,message_c))
